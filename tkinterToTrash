
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
import plotly.io as pio
import tkinter as tk
from threading import Thread
import time

# Function to get stock data
def get_stock_data(ticker, timeframe='1d', interval='1m'):
    stock = yf.Ticker(ticker)
    stock_data = stock.history(period=timeframe, interval=interval)
    return stock_data

# Function to get option data
def get_option_data(ticker, option_type, expiry, strike, timeframe='1d', interval='1m'):
    stock = yf.Ticker(ticker)
    option_chain = stock.option_chain(expiry)
    
    if option_type.lower() == 'call':
        options = option_chain.calls
    elif option_type.lower() == 'put':
        options = option_chain.puts
    else:
        raise ValueError("Option type must be 'call' or 'put'")
    
    option = options[options['strike'] == strike].iloc[0]
    option_symbol = option['contractSymbol']
    option_data = yf.Ticker(option_symbol).history(period=timeframe, interval=interval)
    
    return option_data

# Function to plot data
def plot_data(data, title):
    fig = go.Figure()
    
    if 'Close' in data.columns:
        fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name='Close'))
    else:
        print(f"Error: 'Close' column is not present in the data for {title}.")
        return None
    
    fig.update_layout(
        title=f'{title} Prices',
        xaxis_title='Time',
        yaxis_title='Price',
        legend_title='Price Type'
    )
    
    return fig

# Function to update data and plot periodically
def update_data_and_plot():
    while True:
        global data, is_option
        if is_option:
            data = get_option_data(ticker, option_type, expiry, strike, timeframe, interval)
        else:
            data = get_stock_data(ticker, timeframe, interval)
        
        if not data.empty:
            fig = plot_data(data, "Option" if is_option else "Stock")
            if fig:
                plot_widget.update_plot(fig)
        
        time.sleep(60)  # Update every 60 seconds

# Class to create plot widget in tkinter
class PlotWidget(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)
        self.plot_label = tk.Label(self, text="")
        self.plot_label.pack()

    def update_plot(self, fig):
        try:
            # Save the plot as HTML and update the label with the plot path
            html_path = "plot.html"
            pio.write_html(fig, file=html_path)
            self.plot_label.config(text=f"Plot saved to: {html_path}")
            
            # Display the plot in a browser
            # import webbrowser
            # webbrowser.open(html_path)
            
            # Alternatively, update label with plot URL for tkinter display
            fig_url = pio.to_html(fig, include_plotlyjs=True, full_html=False)
            self.plot_label.config(text=f"Access your plot at: {fig_url}")
        except Exception as e:
            self.plot_label.config(text=f"Error updating plot: {str(e)}")
            # Optionally, log the error for debugging purposes
            print(f"Error updating plot: {str(e)}")

# Function to start updating data in a separate thread
def start_updating():
    thread = Thread(target=update_data_and_plot)
    thread.daemon = True
    thread.start()

# User input
type_choice = input("Enter 'o' for option or 's' for stock: ").lower()

if type_choice == 'o':
    ticker = input("Enter ticker symbol (e.g., NVDA240920C265): ")
    option_type = input("Enter option type (call/put): ")
    expiry = input("Enter expiry date (YYYY-MM-DD): ")
    strike = float(input("Enter strike price: "))
    is_option = True
elif type_choice == 's':
    ticker = input("Enter stock ticker symbol: ")
    is_option = False
else:
    raise ValueError("Invalid choice. Please enter 'o' for option or 's' for stock.")

timeframe = input("Enter timeframe (default 1d): ") or '1d'
interval = input("Enter interval (default 1m): ") or '1m'

# Tkinter setup
root = tk.Tk()
root.title("Real-Time Financial Data Widget")

plot_widget = PlotWidget(root)
plot_widget.pack()

# Example plot data and update
fig = go.Figure(data=go.Scatter(x=[1, 2, 3], y=[4, 5, 6]))
plot_widget.update_plot(fig)

# Start updating data and plot
start_updating()

# Run the Tkinter main loop
root.mainloop()
