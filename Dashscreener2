import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output, State
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime, time
import holidays

# Initialize Dash app
app = dash.Dash(__name__)

# List of options for time interval and timeframe
time_intervals = ['1m', '2m', '5m', '15m', '30m', '1h', '1d', '5d', '1wk', '1mo', '3mo']
timeframes = ['1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'max']

# Layout of the app
app.layout = html.Div([
    html.H1('Real-Time Stock-Option Pair Dashboard', style={'textAlign': 'center'}),
    
    html.Div([
        html.Div([
            html.H2('Stock'),
            dcc.Input(id='stock-ticker-input', type='text', placeholder='Enter Stock Ticker Symbol (e.g., aapl)', style={'width': '50%'}),
            dcc.Dropdown(id='stock-timeframe-dropdown', options=[{'label': i, 'value': i} for i in timeframes], value='1d', placeholder='Select Timeframe', style={'width': '50%'}),
            dcc.Dropdown(id='stock-interval-dropdown', options=[{'label': i, 'value': i} for i in time_intervals], value='1m', placeholder='Select Interval', style={'width': '50%'}),
            html.Div(id='alerts-container'),
            dcc.Graph(id='stock-plot', style={'height': '70vh'}),
            html.Div(id='stock-screener-container', children=[
                html.H2('Stock Screener'),
                dash_table.DataTable(
                    id='stock-screener',
                    columns=[{"name": i, "id": i} for i in ['Ticker', 'Close', 'Volume', 'Market Cap']],
                    data=[],
                    style_table={'overflowX': 'scroll'},
                    style_cell={'whiteSpace': 'normal'},
                    style_data={'minWidth': '10%', 'maxWidth': '30%'}
                ),
            ]),
        ], style={'width': '70%', 'display': 'inline-block', 'vertical-align': 'top'}),
        
        html.Div([
            html.H2('Option'),
            dcc.Input(id='option-ticker-input', type='text', placeholder='Enter Stock Ticker (e.g., aapl)', style={'width': '90%'}),
            dcc.Input(id='option-type-input', type='text', placeholder='Enter Option Type (c or p)', style={'width': '90%'}),
            dcc.Input(id='option-expiry-input', type='text', placeholder='Enter Expiry Date (YYYY-MM-DD)', style={'width': '90%'}),
            dcc.Input(id='option-strike-input', type='number', placeholder='Enter Strike Price', style={'width': '90%'}),
            dcc.Dropdown(id='option-timeframe-dropdown', options=[{'label': i, 'value': i} for i in timeframes], value='1d', placeholder='Select Timeframe', style={'width': '90%'}),
            dcc.Dropdown(id='option-interval-dropdown', options=[{'label': i, 'value': i} for i in time_intervals], value='1m', placeholder='Select Interval', style={'width': '90%'}),
            dcc.Graph(id='option-plot', style={'height': '65vh', 'width': '100%'}),
            html.Div(id='option-table-container', children=[
                html.H2('Option Data Table'),
                dash_table.DataTable(
                    id='option-table',
                    columns=[{"name": i, "id": i} for i in ['Date', 'Close', 'Volume']],
                    data=[],
                    style_table={'overflowX': 'scroll'},
                    style_cell={'minWidth': '0px', 'maxWidth': '180px', 'whiteSpace': 'normal'},
                ),
            ]),
        ], style={'width': '28%', 'display': 'inline-block', 'vertical-align': 'top'}),
    ]),
    
    dcc.Interval(
        id='interval-component',
        interval=60*1000,  # in milliseconds (default update every minute)
        n_intervals=0
    )
])

def is_market_open():
    current_time = datetime.now()
    market_open_time = time(9, 30) # Market opens at 9:30 AM
    market_close_time = time(16, 0) # Market closes at 4:00 PM
    
    us_holidays = holidays.US()# Initialize US holidays
    
    if current_time.date() in us_holidays:
        return False
    if current_time.weekday() >= 5:  # 5 = Saturday, 6 = Sunday
        return False
    if market_open_time <= current_time.time() <= market_close_time:
        return True
    return False

def get_stock_data(ticker, timeframe='1d', interval='1m'):
    stock = yf.Ticker(ticker)
    stock_data = stock.history(period=timeframe, interval=interval)
    return stock_data

def get_option_data(ticker, option_type, expiry, strike, timeframe='1d', interval='1m'):
    stock = yf.Ticker(ticker)
    option_chain = stock.option_chain(expiry)
    
    if option_type.lower() == 'c':
        options = option_chain.calls
    elif option_type.lower() == 'p':
        options = option_chain.puts
    else:
        raise ValueError("Option type must be 'c' for call or 'p' for put")
    
    option = options[options['strike'] == strike].iloc[0]
    option_symbol = option['contractSymbol']
    option_data = yf.Ticker(option_symbol).history(period=timeframe, interval=interval)
    return option_data

def prepare_table_data(data):
    table_data = []
    if not data.empty:
        for idx, row in data.iterrows():
            table_data.append({
                'Date': idx.strftime('%Y-%m-%d %H:%M:%S'),
                'Close': row['Close'],
                'Volume': row['Volume']
            })
    table_data.sort(key=lambda x: x['Date'], reverse=True)
    return table_data

import plotly.graph_objs as go

import plotly.graph_objs as go

def plot_data(data, title, is_option=False):
    fig = go.Figure()
    
    if 'Close' in data.columns:
        if len(data) > 0:  # Check if data is not empty
            color = 'green' if data['Close'].iloc[-1] >= data['Close'].iloc[0] else 'red'
            fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines+markers', line=dict(color=color), name='Close'))

            # Calculate percentage change from the initial data point
            data['Pct Change'] = (data['Close'] / data['Close'].iloc[0] - 1) * 100  # Convert to percentage
            print(data[['Close', 'Pct Change']].head())  # Debug: print the first few rows

            # Adding simple moving averages (SMAs)
            data['SMA_10'] = data['Close'].rolling(window=10).mean()
            data['SMA_20'] = data['Close'].rolling(window=20).mean()

            if not is_option:  # For stock plot
                data['SMA_7'] = data['Close'].rolling(window=7).mean()
                data['SMA_50'] = data['Close'].rolling(window=50).mean()

                fig.add_trace(go.Scatter(x=data.index, y=data['SMA_7'], mode='lines', line=dict(color='blue'), name='SMA 7'))
                fig.add_trace(go.Scatter(x=data.index, y=data['SMA_50'], mode='lines', line=dict(color='purple'), name='SMA 50'))

            fig.add_trace(go.Scatter(x=data.index, y=data['SMA_10'], mode='lines', line=dict(color='pink'), name='SMA 10'))
            fig.add_trace(go.Scatter(x=data.index, y=data['SMA_20'], mode='lines', line=dict(color='black'), name='SMA 20'))

            if not is_option:  # For stock plot
                # Calculate Hull Moving Average (HMA)
                wma_half = data['Close'].rolling(window=3).mean()
                wma_full = data['Close'].rolling(window=6).mean()
                hma = (2 * wma_half - wma_full).rolling(window=int(6**0.5)).mean()
                data['HMA_6'] = hma

                fig.add_trace(go.Scatter(x=data.index, y=data['HMA_6'], mode='lines', line=dict(color='orange'), name='HMA 6'))
        else:
            print("Debug: Data is empty.")
    else:
        return go.Figure()  # Return empty figure if 'Close' column is not present

    if 'Pct Change' in data.columns:
        max_pct_change = data['Pct Change'].max()
        fig.update_layout(
            title=f'{title} Prices',
            xaxis_title='Time',
            yaxis_title='Price',
            yaxis2=dict(
                title='% Change',
                overlaying='y',
                side='right',
                showgrid=False,
                tickformat=".0%",  # Format ticks as percentages
                rangemode='tozero',  # Ensure the range starts from zero
                range=[0, max_pct_change * 1.1]  # Set the range based on max percentage change
            ),
            # plot_bgcolor='white',  # Set plot background color to white
            # paper_bgcolor='white'  # Set paper background color to white
        )
    else:
        print("Debug: 'Pct Change' column not found in the data.")

    return fig



# Fetch all stock tickers from Yahoo Finance
def get_all_stock_tickers():
    # Use predefined list or fetch from an API
    # Here we use a small sample list for demonstration purposes
    tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'FB']
    return tickers

# Screen stocks based on criteria (e.g., close price, volume, market cap)
def screen_stocks(tickers):
    screened_stocks = []
    for ticker in tickers:
        stock = yf.Ticker(ticker)
        data = stock.history(period='1d')
        if not data.empty:
            close_price = data['Close'].iloc[-1]
            volume = data['Volume'].iloc[-1]
            market_cap = stock.info.get('marketCap', 'N/A')
            screened_stocks.append({
                'Ticker': ticker,
                'Close': close_price,
                'Volume': volume,
                'Market Cap': market_cap
            })
    return screened_stocks

@app.callback(
    Output('stock-plot', 'figure'),
    Output('option-plot', 'figure'),
    Output('option-table', 'data'),
    Output('stock-screener', 'data'),
    Input('interval-component', 'n_intervals'),
    Input('stock-ticker-input', 'value'),
    Input('stock-timeframe-dropdown', 'value'),
    Input('stock-interval-dropdown', 'value'),
    Input('option-ticker-input', 'value'),
    Input('option-type-input', 'value'),
    Input('option-expiry-input', 'value'),
    Input('option-strike-input', 'value'),
    Input('option-timeframe-dropdown', 'value'),
    Input('option-interval-dropdown', 'value')
)
def update_data(n_intervals, stock_ticker, stock_timeframe, stock_interval, 
                option_ticker, option_type, option_expiry, option_strike, 
                option_timeframe, option_interval):
    # Initialize outputs
    stock_fig = go.Figure()
    option_fig = go.Figure()
    option_table_data = []
    stock_screener_data = []

    # Check if market is open
    if is_market_open():
        # Get stock data and update stock plot
        if stock_ticker:
            stock_data = get_stock_data(stock_ticker, stock_timeframe, stock_interval)
            stock_fig = plot_data(stock_data, f'{stock_ticker.upper()} Stock')

        # Get option data and update option plot and table
        if option_ticker and option_type and option_expiry and option_strike:
            try:
                option_data = get_option_data(option_ticker, option_type, option_expiry, option_strike, option_timeframe, option_interval)
                option_fig = plot_data(option_data, f'{option_ticker.upper()} {option_type.upper()} Option', is_option=True)
                option_table_data = prepare_table_data(option_data)
            except Exception as e:
                print(f"Error fetching option data: {e}")

        # Update stock screener
        all_tickers = get_all_stock_tickers()
        stock_screener_data = screen_stocks(all_tickers)

    return stock_fig, option_fig, option_table_data, stock_screener_data

if __name__ == '__main__':
    app.run_server(debug=True)