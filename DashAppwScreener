import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output, State
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime, time
import holidays

#make sure only SMA 10, 20 in options plot

# Initialize Dash app
app = dash.Dash(__name__)

# List of options for time interval and timeframe
time_intervals = ['1m', '2m', '5m', '15m', '30m', '1h', '1d', '5d', '1wk', '1mo', '3mo']
timeframes = ['1d', '5d', '1mo', '3mo', '6mo', '1y','2y','5y','10y','max']

# Layout of the app
app.layout = html.Div([
    html.H1('Real-Time Stock-Option Pair Dashboard', style={'textAlign': 'center'}),
    
    html.Div([
        html.Div([
            html.H2('Stock'),
            dcc.Input(id='stock-ticker-input', type='text', placeholder='Enter Stock Ticker Symbol (e.g., aapl)', style={'width': '50%'}),
            dcc.Dropdown(id='stock-timeframe-dropdown', options=[{'label': i, 'value': i} for i in timeframes], value='1d', placeholder='Select Timeframe', style={'width': '50%'}),
            dcc.Dropdown(id='stock-interval-dropdown', options=[{'label': i, 'value': i} for i in time_intervals], value='1m', placeholder='Select Interval', style={'width': '50%'}),
            html.Div(id='alerts-container'),
            dcc.Graph(id='stock-plot', style={'height': '70vh'}),
            html.Div(id='stock-screener-container', children=[
                html.H2('Stock Screener'),
                dash_table.DataTable(
                    id='stock-screener-table',
                    columns=[
                        {"name": "Ticker", "id": "Ticker"},
                        {"name": "Close", "id": "Close"},
                        {"name": "Market Cap", "id": "Market Cap"},
                    ],
                    data=[],
                    style_table={'overflowX': 'scroll'},
                    style_cell={'whiteSpace': 'normal'},
                    style_data={'minWidth': '10%', 'maxWidth': '30%'},
                    row_selectable='single',  # Enable row selection
                ),
            ]),

        
        ], style={'width': '70%', 'display': 'inline-block', 'vertical-align': 'top'}),
        
        html.Div([
            html.H2('Option'),
            dcc.Input(id='option-ticker-input', type='text', placeholder='Enter Stock Ticker (e.g., aapl)', style={'width': '90%'}),
            dcc.Input(id='option-type-input', type='text', placeholder='Enter Option Type (c or p)', style={'width': '90%'}),
            dcc.Input(id='option-expiry-input', type='text', placeholder='Enter Expiry Date (YYYY-MM-DD)', style={'width': '90%'}),
            dcc.Input(id='option-strike-input', type='number', placeholder='Enter Strike Price', style={'width': '90%'}),
            dcc.Dropdown(id='option-timeframe-dropdown', options=[{'label': i, 'value': i} for i in timeframes], value='1d', placeholder='Select Timeframe', style={'width': '90%'}),
            dcc.Dropdown(id='option-interval-dropdown', options=[{'label': i, 'value': i} for i in time_intervals], value='1m', placeholder='Select Interval', style={'width': '90%'}),
            dcc.Graph(id='option-plot', style={'height': '65vh', 'width': '100%'}),
            html.Div(id='option-table-container', children=[
                html.H2('Option Data Table'),
                dash_table.DataTable(
                    id='option-table',
                    columns=[{"name": i, "id": i} for i in ['Date', 'Close', 'Volume']],
                    data=[],
                    style_table={'overflowX': 'scroll'},
                    style_cell={'minWidth': '0px', 'maxWidth': '180px', 'whiteSpace': 'normal'},
                ),
            ]),


        ], style={'width': '28%', 'display': 'inline-block', 'vertical-align': 'top'}),
    ]),
    
    dcc.Interval(
        id='interval-component',
        interval=60*1000,  # in milliseconds (default update every minute)
        n_intervals=0
    )
])

def is_market_open():
    current_time = datetime.now()
    market_open_time = time(9, 30) # Market opens at 9:30 AM
    market_close_time = time(16, 0) # Market closes at 4:00 PM
    
    us_holidays = holidays.US()# Initialize US holidays
    
    if current_time.date() in us_holidays:
        return False
    if current_time.weekday() >= 5:  # 5 = Saturday, 6 = Sunday
        return False
    if market_open_time <= current_time.time() <= market_close_time:
        return True
    return False

def get_stock_data(ticker, timeframe='1d', interval='1m'):
    stock = yf.Ticker(ticker)
    stock_data = stock.history(period=timeframe, interval=interval)
    # print(f"Debug: Stock Data for {ticker}:\n{stock_data.head()}")  # Debug print
    # print(f"Debug: Stock Data for {ticker} (Columns: {list(stock_data.columns)}):\n{stock_data}")  # Debug print with column names
    # print(f"Debug: Stock Data for {ticker} (Columns: {list(stock_data.columns)}):\n{stock_data}")  # Debug print with column names

    return stock_data

def get_option_data(ticker, option_type, expiry, strike, timeframe='1d', interval='1m'):
    stock = yf.Ticker(ticker)
    option_chain = stock.option_chain(expiry)
    
    if option_type.lower() == 'c':
        options = option_chain.calls
    elif option_type.lower() == 'p':
        options = option_chain.puts
    else:
        raise ValueError("Option type must be 'c' for call or 'p' for put")
    
    option = options[options['strike'] == strike].iloc[0]
    option_symbol = option['contractSymbol']
    option_data = yf.Ticker(option_symbol).history(period=timeframe, interval=interval)
    # print(f"Debug: Option Data for {option_symbol} (Columns: {list(option_data.columns)}):\n{option_data}")  # Debug print with column names
    # print(f"Debug: Option Data for {option_symbol}:\n{option_data}")  # Debug print
    # print(f"Debug: Option Data for {option_symbol} (Columns: {list(option_data.columns)}):\n{option_data}")  # Debug print with column names

    return option_data

def prepare_table_data(data):
    table_data = []
    if not data.empty:
        for idx, row in data.iterrows():
            table_data.append({
                'Date': idx.strftime('%Y-%m-%d %H:%M:%S'),
                'Close': row['Close'],
                'Volume': row['Volume']
            })
            # Sort by most recent first
    table_data.sort(key=lambda x: x['Date'], reverse=True)
    return table_data
def plot_data(data, title, is_option=False):
    fig = go.Figure()
    if 'Close' in data.columns:
        if len(data) > 0:  # Check if data is not empty
            color = 'green' if data['Close'].iloc[-1] >= data['Close'].iloc[0] else 'red'
            fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines+markers', line=dict(color=color), name='Close'))

            # Adding simple moving averages (SMAs)
            data['SMA_10'] = data['Close'].rolling(window=10).mean()
            data['SMA_20'] = data['Close'].rolling(window=20).mean()

            if not is_option:  # For stock plot
                data['SMA_7'] = data['Close'].rolling(window=7).mean()
                data['SMA_50'] = data['Close'].rolling(window=50).mean()

                fig.add_trace(go.Scatter(x=data.index, y=data['SMA_7'], mode='lines', line=dict(color='blue'), name='SMA 7'))
                fig.add_trace(go.Scatter(x=data.index, y=data['SMA_50'], mode='lines', line=dict(color='purple'), name='SMA 50'))

            fig.add_trace(go.Scatter(x=data.index, y=data['SMA_10'], mode='lines', line=dict(color='pink'), name='SMA 10'))
            fig.add_trace(go.Scatter(x=data.index, y=data['SMA_20'], mode='lines', line=dict(color='black'), name='SMA 20'))

            if not is_option:  # For stock plot
                # Calculate Hull Moving Average (HMA)
                wma_half = data['Close'].rolling(window=3).mean()
                wma_full = data['Close'].rolling(window=6).mean()
                hma = (2 * wma_half - wma_full).rolling(window=int(6**0.5)).mean()
                data['HMA_6'] = hma

                fig.add_trace(go.Scatter(x=data.index, y=data['HMA_6'], mode='lines', line=dict(color='orange'), name='HMA 6'))
        else:
            print("Debug: Data is empty.")
    else:
        return go.Figure()  # Return empty figure if 'Close' column is not present

    fig.update_layout(
        title=f'{title} Prices',
        xaxis_title='Time',
        yaxis_title='Price',
        # legend_title='Price Type'
    )
    
    return fig




@app.callback(
    Output('stock-interval-dropdown', 'options'),
    Output('option-interval-dropdown', 'options'),
    Input('stock-timeframe-dropdown', 'value'),
    Input('option-timeframe-dropdown', 'value'),
)
def update_intervals(stock_timeframe, option_timeframe):
    interval_options = {
        '1d': [{'label': i, 'value': i} for i in ['1m', '2m', '5m', '15m', '30m', '1h', '1d']],
        '5d': [{'label': i, 'value': i} for i in ['1m', '2m', '5m', '15m', '30m', '1h', '1d', '5d']],
        '1mo': [{'label': i, 'value': i} for i in ['2m', '5m', '15m', '30m', '1h', '1d', '5d', '1mo']],
        '3mo': [{'label': i, 'value': i} for i in ['1h', '1d', '5d', '1mo', '3mo']],
        '6mo': [{'label': i, 'value': i} for i in ['1d', '5d', '1mo', '3mo']],
        '1y': [{'label': i, 'value': i} for i in ['1d', '5d', '1mo', '3mo']],
        '2y': [{'label': i, 'value': i} for i in ['1d', '5d', '1mo', '3mo']],
        '5y': [{'label': i, 'value': i} for i in ['1d', '5d', '1mo', '3mo']],
        '10y': [{'label': i, 'value': i} for i in ['1d', '5d', '1mo', '3mo']],
        'max': [{'label': i, 'value': i} for i in ['1d', '5d', '1mo', '3mo']],
    }
    
    stock_intervals = interval_options.get(stock_timeframe, [])
    option_intervals = interval_options.get(option_timeframe, [])
    
    return stock_intervals, option_intervals



@app.callback(
    Output('stock-plot', 'figure'),
    Output('stock-screener-table', 'data'),
    Output('option-plot', 'figure'),
    Output('option-table', 'data'),
    Output('alerts-container', 'children'),
    Output('interval-component', 'interval'),

    Input('interval-component', 'n_intervals'),
    Input('stock-ticker-input', 'value'),
    Input('stock-timeframe-dropdown', 'value'),
    Input('stock-interval-dropdown', 'value'),
    Input('option-ticker-input', 'value'),
    Input('option-type-input', 'value'),
    Input('option-expiry-input', 'value'),
    Input('option-strike-input', 'value'),
    Input('option-timeframe-dropdown', 'value'),
    Input('option-interval-dropdown', 'value'),
    Input('stock-screener-table', 'selected_rows'),
    State('stock-screener-table', 'data'),
)



def update_data_and_plot(n_intervals,
                         stock_ticker, stock_timeframe, stock_interval,
                         option_ticker, option_type, option_expiry, option_strike, option_timeframe, 
                         option_interval, selected_rows, screener_data):
    
    ctx = dash.callback_context
    triggered_id = ctx.triggered[0]['prop_id'].split('.')[0] if ctx.triggered else None


    # Initialize outputs
    stock_fig = go.Figure()
    option_fig = go.Figure()
    option_table_data = []
    alerts = []  # Initialize alerts list
    screener_data = []  # Data for stock screener
    
    # Set default intervals
    default_intervals = {
        '1d': '1m',
        '5d': '1h',
        '1mo': '1d',
        '3mo': '1d',
        '6mo': '1d',
        '1y': '1d',
        '2y': '1d',
        '5y': '1d',
        '10y': '1d',
        'max': '1d'
    }
    
    # Set default intervals if None
    stock_interval = stock_interval or default_intervals.get(stock_timeframe)
    option_interval = option_interval or default_intervals.get(option_timeframe)
    
   
   # Determine if the market is open
    market_open = is_market_open()
    
    # Set interval based on market status  tp prevent more frequent (unnecessary) callback triggers.
    if market_open:
        update_interval = 60000  # 1 minute interval when market is open
    else:
        update_interval = 259200000  # 3 day interval when market is closed
    

    # Only update data if user input changed or if market is open and interval update triggered
    if triggered_id != 'interval-component' or (triggered_id == 'interval-component' and market_open):
        if stock_ticker:
            stock_data = get_stock_data(stock_ticker, stock_timeframe, stock_interval)
            stock_fig = plot_data(stock_data, 'Stock')
            stock_table_data = prepare_table_data(stock_data)
            
            if not stock_data.empty:
                latest_close = stock_data['Close'].iloc[-1]
                sma_20 = stock_data['SMA_20'].iloc[-1]
                sma_7 = stock_data['SMA_7'].iloc[-1]
                hma_6 = stock_data['HMA_6'].iloc[-1]

                # Add alerts based on conditions
                if latest_close < sma_20:
                    alerts.append(html.Div('Sell Bear Alert: Close below SMA 20', style={'color': 'red'}))
                if latest_close < sma_7:
                    alerts.append(html.Div('Bear Alert: Close below SMA 7', style={'color': 'red'}))
                if hma_6 < sma_7:
                    alerts.append(html.Div('Short Term Bear Alert: HMA 6 below SMA 7', style={'color': 'red'}))
                if latest_close > sma_20:
                    alerts.append(html.Div('Buy Bull Alert: Close above SMA 20', style={'color': 'green'}))
                if latest_close > sma_7:
                    alerts.append(html.Div('Bull Alert: Close above SMA 7', style={'color': 'green'}))
                if hma_6 > sma_7:
                    alerts.append(html.Div('Short Term Bull Alert: HMA 6 above SMA 7', style={'color': 'green'}))
                if not market_open:
                    alerts.append(html.Div('Market closed - not updating', style={'color': 'orange'}))

        if option_ticker and option_type and option_expiry and option_strike:
            option_data = get_option_data(option_ticker, option_type, option_expiry, option_strike, option_timeframe, option_interval)
            if not option_data.empty:
                option_table_data = prepare_table_data(option_data)
                option_fig = plot_data(option_data, 'Option', is_option=True)
            else:
                print(f"Debug: Option data for {option_ticker} option is empty or has no 'Close' column.")
    
    # Ensure alerts is not empty even if there are no alerts
    alerts_content = html.Div(alerts) if alerts else []

    


    return stock_fig, option_fig, option_table_data, alerts_content, update_interval

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)
